[include]
    path = .gitconfig.github
    path = .gitconfig.user

[color]
    diff = auto

[alias]
    ci = commit -v
    cia = commit -v -a
    #co = checkout # too potentially dangerous to be 1 char away from ci
    di = diff --no-prefix
    dic = diff --cached
    ds = diff --stat
    st = status
    ls = log --stat
    lp = log -p
    lo = log --pretty=oneline
    br = branch
    ri = rebase -i
    diffwords = diff --word-diff
    ss = show --stat
    unstage = reset HEAD
    uncommit = reset --soft HEAD^
    reshuffle = rebase -i HEAD@{upstream}
    upstream = rev-parse --symbolic-full-name  --abbrev-ref HEAD@{upstream}
    # list files at revision
    ls-at = ls-tree -r --name-only
    # patch for a commit:
    #   git patch abc123 | perl -ple '' | git am -3 -k --ignore-space-change
    patch = !"git format-patch -k --stdout $1^..$1"

    # http://lists-archives.com/git/694641-add-porcelain-option-to-git-push.html
    npush = !"git push -n $* ; \
              git push -n --porcelain $* \
                | perl -nlE '/\\t([0-9a-f]+\\.\\.[[0-9a-f]+)$/ && say $1' \
                | xargs --no-run-if-empty git log --stat --oneline"

    symh = symbolic-ref h HEAD # "h" as HEAD synonym

    rebranch = branch -f
    # 2009-05-26  (merged-blah) 6fe85ff regenerate something Author Name
    logdate = log --format=format:'%ad %d %h %s %an%n' --date=short
    brdate = !"sh -c 'for b in `git branch --no-merged` ; \
                do git logdate -1 -r $b --; done'"

    svnpush = svn dcommit
    svnpull = svn rebase

    # find duplicate files
    dupes = !"git ls-tree -r HEAD | cut -c 13- | sort | uniq -D -w 40"

    pick = cherry-pick -s

    save = stash save
    pop = stash pop

    praise = blame -w
    archeology = blame -w -C -n
    whodoikill = blame -w -C -n
    logfile = log --follow -C
    plog = !git log --pretty=olcolour --graph --all
    who = shortlog -sen --
    grep4d = !sh -c 'git log -p -S$1 $2' -

    # who's work am I overwriting?
    blamediff = !"git diff -U0 --src-prefix=SRC: \
                | perl -nlE '/^@@ -(\\d+)(?:,(\\d+))? / \
                  && say qq{-L $1,+},($2||1),qq{ HEAD $s}; \
                  /--- SRC:(.*)/ and $s=$1' \
                | while read l; \
                  do git blame -w --date=short $l; done"
    # gdi -U0 --src-prefix=SRC: | perl -nlE '/^@@ -(\d+)(?:,(\d+))? /&&say"-L $1,+",($2||1)," HEAD $s";/--- SRC:(.*)/ and$s=$1' | while read l; do echo; (set -x; git blame  -w --date=short $l); done

    # autosquash
    #git commit -m 'squash!' some_file; git rebase -i --autosquash HEAD^
    #git log -1 --pretty="fixup! %h" HEAD^ | git commit -F -

    # added git-show-dc in path instead
    dst = log --stat --pretty=oneline --abbrev-commit trunk..
    # git diff --stat trunk HEAD
    #show-dc = "!dcn() { git svn dcommit -n | perl -nle '$f or ($f) = /^diff-tree (\\S+)/; ($t) = / (\\S+)$/; END { print qq{$f $t} }'; }; git diff --stat `dcn`"
    # https://git.wiki.kernel.org/index.php/Aliases
    # new commits have been created by the last command
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"
    whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short
    aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

    # This produces output that can be displayed using dotty, for example:
    # $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
    empty-tree-sha1 = hash-object -t tree /dev/null
    # check work tree for whitespace violations
    ws = !"git diff --check $(git empty-tree-sha1)"

    unstage = reset HEAD
    redo = reset --soft HEAD^
    clear = reset --hard HEAD
    undo = reset --hard HEAD^

    repull = pull --rebase

    hist = log --all --graph --pretty='[%C(cyan)%h%Creset]%C(bold cyan)%d%Creset %s'
    tt=timetrack
    lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lol = log --oneline --graph --decorate

[pretty]
    olcolour = format:%C(yellow)%h%Creset %s %Cblue%d%Creset
    brlog = tformat:%C(yellow)%d%Creset %h%n %an, %ar%n%s%n

[rebase]
    autosquash = 1
[diff]
    mnemonicprefix = true
[push]
	default = upstream
